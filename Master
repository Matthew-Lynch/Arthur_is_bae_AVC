#include <stdio.h>
#include <time.h>
#include "E101.h" //this is our custom ENGR101 C library.

//Global Variables
int whiteCount = 0;


int read_cam(int row){
	whiteCount = 0;
	double col = 0;
	take_picture();
	int sum,s;
	double signal = 0;
	int white;
	//Camera reading Near row
	for(int i=0; i<320 ; i++){
	white = get_pixel(col,row,3);
		if (white>127){
		s = 1;
		whiteCount++;
		} else {
		s = 0;
		}
	sum = sum + (i-160)*s; //Gives the white a value that is centred at 0 (middle of picture)
	}
	signal = sum;
	//printf("%f",signal);
	return signal; //Return totalWhite;

}

double scale_pid(double pid, float motorGain){ //call scale passing pid signal and motor gain as input
	float scale = 0.2; //Needs tuning based on max PID output
	double temp;
	int output;
	
	if(pid * scale > 55){ //Limiter
		temp = 55;   //adjusted down from 254 to 55 under recomendation from arthur - Matt
	}
	else{
		temp = (pid * scale); //scales PID and casts to int
	}
	output = temp*motorGain; //compensate for motor
	//printf("%d",output);
	return output;
}

double pid(double inNear, double inFar){ //call pid passing error signal as input
	//double dt = 0.001 //time step in s
	float dGain = 0.5; //differential gain co-efficient
	float iGain = 0.5; //integral gain co-efficient
	float pGain = 0.5; //proportional gain co-efficient
	double errTotal = 0; //recent error signal input
	//double errNew; //error signal input from dt ago
	double diff; //differential
	double integ; //integral
	double prop; //proportional
	double PID;
	int i = 0; //number of samples collected

	//errNew = input;
	//sleep1(0, 001); //this MUST equal dt

while(true){
	errTotal += inNear; // adds input to total - used inNear, this could change
	i++; 
	diff = ((inNear-inFar)/2)*dGain; //change from errNear to errFar * gain
	integ = ((errTotal)/i)*iGain; //average err * time step * gain
	//sleep1(0, 001); //this MUST equal dt
	prop = inNear*pGain; //Calculate proportional err - used inNear, this could change
	PID = prop+diff+integ; //Sum components
	return PID;
}
}



int main(){
	init();
	bool cam = true;
	double errNear;
	double errFar; 
	double errPID;
	int driveLeft;
	int driveRight;
	
	while(true){
	//cam = set_mode()
		/* if(whiteCount<3){
		 * panic(); // could probably just be set to turnRight as this 'should' only happen at dead ends- Matt
		 * }
		 * if(whiteCount>212 && signal<-50){ //212 is 2/3rds of frame width.  Matt-added the  &&<-50 as you could have a white count larger than 212 at a right turn
		 * turnLeft();
		 * }
		**/
		if(cam==true){
			errNear = read_cam(160);
			errFar = read_cam(80);
		}
		else{
			//read_ir(); //write processes for this
		}
	errPID = pid(errNear,errFar);
	driveLeft = scale_pid(errPID, 0.95); // tune gain L
	driveRight = scale_pid(errPID, 1); //tune gain R

	set_motor(0, driveLeft);
	set_motor(1, driveRight);

	}
return 0;
}
